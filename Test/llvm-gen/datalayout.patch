Copyright (c) 2012-2014 NVIDIA Corporation.  All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

Apply this patch to llvm-general-pure-3.2.8.2 to workaround the datalayout issue
in libNVVM 1.0.

--- a/llvm-general-pure/src/LLVM/General/DataLayout.hs
+++ b/llvm-general-pure/src/LLVM/General/DataLayout.hs
@@ -6,6 +6,7 @@ module LLVM.General.DataLayout (
 import Control.Applicative
 
 import Data.Word
+import Data.Function
 
 import qualified Data.List as List
 import qualified Data.Map as Map
@@ -26,6 +27,13 @@ dataLayoutToString dl =
                     FloatAlign -> "f"
                     AggregateAlign -> "a"
                     StackAlign -> "s"
+
+      nvvmHack ((i,_),_) ((j,_),_) =
+        case (atChar i, atChar j) of
+          ("i","f")     -> LT
+          ("f","i")     -> GT
+          (x,y)         -> compare x y
+
   in
   List.intercalate "-" (
     (case endianness dl of Just BigEndian -> ["E"]; Just LittleEndian -> ["e"]; _ -> [])
@@ -34,7 +42,7 @@ dataLayoutToString dl =
     ++
     [ "p" ++ (if a == 0 then "" else show a) ++ ":" ++ sTriple t | (AddrSpace a, t) <- Map.toList . pointerLayouts $ dl]
     ++
-    [ atChar at ++ sTriple (s, ai) | ((at, s), ai) <- Map.toList . typeLayouts $ dl ]
+    [ atChar at ++ sTriple (s, ai) | ((at, s), ai) <- List.sortBy nvvmHack . Map.toList . typeLayouts $ dl ]
     ++ 
     (maybe [] (\ns -> ["n" ++ (List.intercalate ":" (map show . Set.toList $ ns))]) (nativeSizes dl))
   )
